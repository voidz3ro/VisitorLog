//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 12.0.21005.1
// 
namespace VisitorLog.VisitorLogService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VisitLog", Namespace="http://schemas.datacontract.org/2004/07/VisitorLogService")]
    public partial class VisitLog : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ActionField;
        
        private string CityField;
        
        private string CompanyField;
        
        private string CountryField;
        
        private string EntityField;
        
        private int IdField;
        
        private System.Nullable<bool> PrescreenedField;
        
        private string SublocationField;
        
        private System.DateTime datestampField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Entity {
            get {
                return this.EntityField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityField, value) != true)) {
                    this.EntityField = value;
                    this.RaisePropertyChanged("Entity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Prescreened {
            get {
                return this.PrescreenedField;
            }
            set {
                if ((this.PrescreenedField.Equals(value) != true)) {
                    this.PrescreenedField = value;
                    this.RaisePropertyChanged("Prescreened");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sublocation {
            get {
                return this.SublocationField;
            }
            set {
                if ((object.ReferenceEquals(this.SublocationField, value) != true)) {
                    this.SublocationField = value;
                    this.RaisePropertyChanged("Sublocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime datestamp {
            get {
                return this.datestampField;
            }
            set {
                if ((this.datestampField.Equals(value) != true)) {
                    this.datestampField = value;
                    this.RaisePropertyChanged("datestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="VisitorLogService.IVisitorLogService")]
    public interface IVisitorLogService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVisitorLogService/RecordAction", ReplyAction="http://tempuri.org/IVisitorLogService/RecordActionResponse")]
        System.Threading.Tasks.Task<string> RecordActionAsync(string naction, string ncompany, string ncountry, string ncity, string nsublocation, bool prescreened, string entity, System.DateTime datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVisitorLogService/GetLogAll", ReplyAction="http://tempuri.org/IVisitorLogService/GetLogAllResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<VisitorLog.VisitorLogService.VisitLog>> GetLogAllAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IVisitorLogServiceChannel : VisitorLog.VisitorLogService.IVisitorLogService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VisitorLogServiceClient : System.ServiceModel.ClientBase<VisitorLog.VisitorLogService.IVisitorLogService>, VisitorLog.VisitorLogService.IVisitorLogService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public VisitorLogServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(VisitorLogServiceClient.GetBindingForEndpoint(endpointConfiguration), VisitorLogServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public VisitorLogServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(VisitorLogServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public VisitorLogServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(VisitorLogServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public VisitorLogServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<string> RecordActionAsync(string naction, string ncompany, string ncountry, string ncity, string nsublocation, bool prescreened, string entity, System.DateTime datetime) {
            return base.Channel.RecordActionAsync(naction, ncompany, ncountry, ncity, nsublocation, prescreened, entity, datetime);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<VisitorLog.VisitorLogService.VisitLog>> GetLogAllAsync() {
            return base.Channel.GetLogAllAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IVisitorLogService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpsBinding_IVisitorLogService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IVisitorLogService)) {
                return new System.ServiceModel.EndpointAddress("http://visitorlogservice.azurewebsites.net/VisitorLogService.svc");
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpsBinding_IVisitorLogService)) {
                return new System.ServiceModel.EndpointAddress("https://visitorlogservice.azurewebsites.net/VisitorLogService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IVisitorLogService,
            
            BasicHttpsBinding_IVisitorLogService,
        }
    }
}
